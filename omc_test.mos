/*
 * A simple OpenModelica script to verify that MessagePack works correctly
 */

setCommandLineOptions("+d=nogen");

loadFile("MessagePack/package.mo");getErrorString();
mkdir("tmp");
cd("tmp");

// Test with a C++ compiler every now and then
// setCompiler("clang++");setLinker("clang++ -shared");setCFlags(getCFlags() + " -x c++");getErrorString();

writeFile("MessagePack.mo","// Do not modify this file: It was automatically generated from https://github.com/sjoelund/msgpack-modelica/\n" + list(exportKind=OpenModelica.Scripting.ExportKind.Absyn));getErrorString();
setCFlags(getCFlags() + " -Werror -g -O0");getErrorString();
loadString("function f
  input String file;
protected
  import MessagePack.Pack;
  Pack.SimpleBuffer.SimpleBuffer sbuffer = Pack.SimpleBuffer.SimpleBuffer();
  Pack.Packer packer = Pack.Packer(sbuffer);
algorithm
  Pack.integer(packer,-65538);
  print(\"Position of OpenModelica string: \" + String(Pack.SimpleBuffer.position(sbuffer)) + \"\n\");
  Pack.string(packer,\"OpenModelica\");
  Pack.map(packer, 1);
  Pack.double(packer,1.0);
  Pack.bool(packer,true);
  Pack.sequence(packer, 2);
  Pack.integer(packer,65538);
  Pack.double(packer,2.0);
  Pack.bool(packer,false);
  print(String(Pack.string(packer,\"OpenModelica\")));
print(\"\nwrite to file \"+file+\"...\n\");
  Pack.SimpleBuffer.writeFile(sbuffer,file);
end f;

function g
  input String file;
protected
  import MessagePack.Utilities.Stream;
  import MessagePack.Unpack;
  Unpack.Deserializer deserializer = Unpack.Deserializer(file);
  Stream.Stream ss = Stream.Stream();
  Integer offset = 0, i;
  String s;
  Boolean success;
algorithm
  print(\"Starting to deserialize \" + file + \"\n\");
  (i,offset) := Unpack.integer(deserializer,offset);
  print(String(i) + \" offset: \" + String(offset) +\"\n\");
  (s,offset) := Unpack.string(deserializer,offset);
  print(s + \" offset: \" + String(offset) +\"\n\");
  offset := Unpack.toStream(deserializer,ss,offset);
  print(Stream.get(ss) + \" offset: \" + String(offset) +\"\n\");
  print(Stream.get(ss) + \" offset: \" + String(offset) +\"\n\");
  success := true;
  while success loop
    (offset,success) := Unpack.toStream(deserializer,ss,offset);
    Stream.append(ss,\"\n\");
  end while;
  print(Stream.get(ss) + \"offset: \" + String(offset) +\"\n\");
end g;

model CreateFile
initial algorithm
  f(\"out.msgpack\");
end CreateFile;

model ReadFile
initial algorithm
  g(\"out.msgpack\");
end ReadFile;

");getErrorString();
system("rm -f out.msgpack");getErrorString();
"f";
simulate(CreateFile);getErrorString();
"system";
system("ls -l out.msgpack");getErrorString();
simulate(ReadFile);getErrorString();
